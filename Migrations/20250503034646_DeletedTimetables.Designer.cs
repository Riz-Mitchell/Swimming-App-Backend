// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SwimmingAppBackend.Infrastructure.Context;

#nullable disable

namespace Swimming_App_Backend.Migrations
{
    [DbContext(typeof(SwimmingAppDBContext))]
    [Migration("20250503034646_DeletedTimetables")]
    partial class DeletedTimetables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetValue")
                        .HasColumnType("integer");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74ca7f30-c3d0-442a-9368-b1877fb2ac01"),
                            Description = "Swim a total of 10,000 meters.",
                            Difficulty = 4,
                            Name = "Marathon Swimmer",
                            TargetValue = 10000,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("f6287bec-d4b1-4112-8fc3-174620a37896"),
                            Description = "Log your first swim session.",
                            Difficulty = 1,
                            Name = "First Swim",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("a1bc78d7-3e42-44a0-8eaf-d809c4b7ead9"),
                            Description = "Log 20 swims.",
                            Difficulty = 2,
                            Name = "Getting it done",
                            TargetValue = 20,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("b20148c7-e6d2-4621-9fd6-34309ad44f24"),
                            Description = "Log 100 swims.",
                            Difficulty = 3,
                            Name = "Busy cooking",
                            TargetValue = 100,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("72a9f4b3-908c-40d8-82d2-abb963ce55dd"),
                            Description = "Log 200 swims.",
                            Difficulty = 4,
                            Name = "Proper chef",
                            TargetValue = 200,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("847799a3-97af-4f8f-96ea-533fdee5ecda"),
                            Description = "You made your first 1000, congratulations, we gotta do at least 20 bro. Log 1000 swims.",
                            Difficulty = 8,
                            Name = "Gotta do at least 20 bro",
                            TargetValue = 1000,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("6b2a1855-20b5-412c-a27c-f90021747f13"),
                            Description = "How did you do that? Log 2000 swims",
                            Difficulty = 10,
                            Name = "Ashton Hall",
                            TargetValue = 2000,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("4829209a-b3d6-4820-954e-499903081052"),
                            Description = "Account over a year old.",
                            Difficulty = 6,
                            Name = "Unc status",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("3989af43-e64b-4aa1-a9d2-36c295822f6f"),
                            Description = "Account over 2 years old.",
                            Difficulty = 8,
                            Name = "Fossil",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("de14c71c-9f44-4c30-96e4-b2ea81fb0670"),
                            Description = "One of the first 20 users to join.",
                            Difficulty = 10,
                            Name = "Founding member",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("8f9814a6-a8bd-4019-ac37-20e0b70a1d7b"),
                            Description = "One of the first 100 users to join.",
                            Difficulty = 8,
                            Name = "Early adopter",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("a647ff5c-d1fe-4dd9-b503-9181b769eb47"),
                            Description = "One of the first 1000 users to join.",
                            Difficulty = 6,
                            Name = "First 1000",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("da47aa8a-413e-48b9-8438-f37ee05bd3bb"),
                            Description = "Log 10 freestyle swims.",
                            Difficulty = 2,
                            Name = "Freestyle beginner",
                            TargetValue = 10,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("4053db8b-7feb-4589-81a6-f38ce1e50e37"),
                            Description = "Log 50 freestyle swims.",
                            Difficulty = 4,
                            Name = "Freestyle connoisseur",
                            TargetValue = 50,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("72d8c6ef-0fd7-4d23-a885-41a198423134"),
                            Description = "Log 100 freestyle swims.",
                            Difficulty = 6,
                            Name = "Freestyle king",
                            TargetValue = 100,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("d045cd15-6d0c-4c47-b4d9-20a9e9ab681c"),
                            Description = "Log 10 breaststroke swims.",
                            Difficulty = 2,
                            Name = "Breaststroke beginner",
                            TargetValue = 10,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("9e76d87d-0879-48a5-aec2-6b2df69e1836"),
                            Description = "Log 50 breaststroke swims.",
                            Difficulty = 4,
                            Name = "Breaststroke connoisseur",
                            TargetValue = 50,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("3eece4f4-3e54-4df5-a050-9c1fbf9a060f"),
                            Description = "Log 100 breaststroke swims.",
                            Difficulty = 6,
                            Name = "Breaststroke king",
                            TargetValue = 100,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("96918ede-f84c-41b6-bf2e-49ad627ef37f"),
                            Description = "Log 10 backstroke swims.",
                            Difficulty = 2,
                            Name = "Backstroke beginner",
                            TargetValue = 10,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("bbe8bff1-b756-4dfd-a819-23f24c215408"),
                            Description = "Log 50 backstroke swims.",
                            Difficulty = 4,
                            Name = "Backstroke connoisseur",
                            TargetValue = 50,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("7916c7b0-260f-4624-8f13-c96de89e5bc7"),
                            Description = "Log 100 backstroke swims.",
                            Difficulty = 6,
                            Name = "Backstroke king",
                            TargetValue = 100,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("40c634e3-6213-4973-a2aa-a93f7a74d768"),
                            Description = "Log 10 butterfly swims.",
                            Difficulty = 2,
                            Name = "Butterfly beginner",
                            TargetValue = 10,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("26b42ab5-58c4-4a2a-ab7d-7df8a870d251"),
                            Description = "Log 50 butterfly swims.",
                            Difficulty = 4,
                            Name = "Butterfly connoisseur",
                            TargetValue = 50,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("a21a7432-c76e-4107-a42b-cce80ef5753a"),
                            Description = "Log 100 butterfly swims.",
                            Difficulty = 6,
                            Name = "Butterfly king",
                            TargetValue = 100,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("fec928d8-adc1-4e4e-84b0-74064865f0b2"),
                            Description = "Log 10 IM swims.",
                            Difficulty = 2,
                            Name = "IM beginner",
                            TargetValue = 10,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("64c0bb01-e05c-4baa-937a-7a9f05116637"),
                            Description = "Log 50 IM swims.",
                            Difficulty = 4,
                            Name = "IM connoisseur",
                            TargetValue = 50,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("0d582ba2-4797-4448-ae2f-03ee2523522d"),
                            Description = "Log 100 IM swims.",
                            Difficulty = 6,
                            Name = "IM king",
                            TargetValue = 100,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("13c37e8b-c29c-4afa-bb5f-48fc438cfcb9"),
                            Description = "Log swims in all four strokes.",
                            Difficulty = 3,
                            Name = "Stroke Master",
                            TargetValue = 4,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("8b62a645-d234-48c2-9f27-6fd61927191c"),
                            Description = "Beat your personal best time for any event.",
                            Difficulty = 2,
                            Name = "PB Chaser",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("1422e4df-2d45-40af-8b31-657d961afe4d"),
                            Description = "Achieve a goal swim time.",
                            Difficulty = 3,
                            Name = "Goal Getter",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("c6f885eb-fae8-4c07-b6dd-2d2a5b7015e1"),
                            Description = "Log 10 swims before 7 AM.",
                            Difficulty = 2,
                            Name = "Morning Grind",
                            TargetValue = 10,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("f3f4bf24-da71-407d-ad16-30596b649c5e"),
                            Description = "Log 10 swims before 6 AM.",
                            Difficulty = 5,
                            Name = "Alright maybe you should sleep in",
                            TargetValue = 10,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("c87b313c-f63f-45fc-9bd9-84ab3020531b"),
                            Description = "Log 50 swims before 5:30AM.",
                            Difficulty = 8,
                            Name = "Dying early",
                            TargetValue = 50,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("8c55c63c-8097-4e9d-8c9d-96de0e721dae"),
                            Description = "Make 5 friends.",
                            Difficulty = 2,
                            Name = "Social Swimmer",
                            TargetValue = 5,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("e463bd58-27d0-4040-9161-2eff4c0167ab"),
                            Description = "Make 20 friends.",
                            Difficulty = 4,
                            Name = "Great guy, amazing guy",
                            TargetValue = 5,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("3e35bdb0-eed2-4297-a059-5cdedd926cd2"),
                            Description = "Log a swim with a perceived exertion of 10.",
                            Difficulty = 1,
                            Name = "Exertion King",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("4bc81770-e3e9-4c28-a89c-95787281084a"),
                            Description = "Swim a 200m event with a perceived exertion of 10.",
                            Difficulty = 3,
                            Name = "Try hard",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("2ef92173-794e-40db-8ef6-812f8cae1cbf"),
                            Description = "Log 5 swims with a perceived exertion of 8 or more in a span of 30 minutes.",
                            Difficulty = 7,
                            Name = "I need a break. AHHHHHHH I NEED A BREAK!!!!",
                            TargetValue = 1,
                            UserType = 0
                        });
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.AthleteData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AthleteDatas");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.CoachData", b =>
                {
                    b.Property<Guid>("CoachDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("CoachDataId");

                    b.ToTable("CoachDatas");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Swim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteDataOwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<bool>("Dive")
                        .HasColumnType("boolean");

                    b.Property<int>("Event")
                        .HasColumnType("integer");

                    b.Property<bool>("GoalSwim")
                        .HasColumnType("boolean");

                    b.Property<int?>("PerceivedExertion")
                        .HasColumnType("integer");

                    b.Property<double?>("PercentageOffGoalStrokeRate")
                        .HasColumnType("double precision");

                    b.Property<double?>("PercentageOffGoalTime")
                        .HasColumnType("double precision");

                    b.Property<double?>("PercentageOffPBStrokeRate")
                        .HasColumnType("double precision");

                    b.Property<double?>("PercentageOffPBTime")
                        .HasColumnType("double precision");

                    b.Property<double?>("PotentialRaceTime")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Stroke")
                        .HasColumnType("integer");

                    b.Property<int?>("StrokeCount")
                        .HasColumnType("integer");

                    b.Property<int?>("StrokeRate")
                        .HasColumnType("integer");

                    b.Property<double>("Time")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AthleteDataOwnerId");

                    b.ToTable("Swims");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Event")
                        .HasColumnType("integer");

                    b.Property<string>("SplitDataForTimes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AthleteDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoachDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AthleteDataId")
                        .IsUnique();

                    b.HasIndex("CoachDataId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EarnedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Pgrogress")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId", "AchievementId")
                        .IsUnique();

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Swim", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.AthleteData", "AthleteDataOwner")
                        .WithMany("Swims")
                        .HasForeignKey("AthleteDataOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteDataOwner");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.User", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.AthleteData", "AthleteData")
                        .WithOne("UserOwner")
                        .HasForeignKey("SwimmingAppBackend.Infrastructure.Models.User", "AthleteDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.CoachData", "CoachData")
                        .WithOne("UserOwner")
                        .HasForeignKey("SwimmingAppBackend.Infrastructure.Models.User", "CoachDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AthleteData");

                    b.Navigation("CoachData");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.UserAchievement", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.AthleteData", b =>
                {
                    b.Navigation("Swims");

                    b.Navigation("UserOwner")
                        .IsRequired();
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.CoachData", b =>
                {
                    b.Navigation("UserOwner")
                        .IsRequired();
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.User", b =>
                {
                    b.Navigation("UserAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
