// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SwimmingAppBackend.Infrastructure.Context;

#nullable disable

namespace Swimming_App_Backend.Migrations
{
    [DbContext(typeof(SwimmingAppDBContext))]
    [Migration("20250430041154_AddedPotentialRaceTimeToSwimModel")]
    partial class AddedPotentialRaceTimeToSwimModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AthleteDataAward", b =>
                {
                    b.Property<Guid>("AwardsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipientsId")
                        .HasColumnType("uuid");

                    b.HasKey("AwardsId", "RecipientsId");

                    b.HasIndex("RecipientsId");

                    b.ToTable("AthleteDataAward");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AthleteDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoachDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AthleteDataId");

                    b.HasIndex("CoachDataId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.AthleteData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AthleteDatas");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachDataOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CoachDataOwnerId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Club", b =>
                {
                    b.Property<Guid>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.CoachData", b =>
                {
                    b.Property<Guid>("CoachDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("CoachDataId");

                    b.ToTable("CoachDatas");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachDataOwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TimetableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CoachDataOwnerId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Set", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.SetItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.ToTable("SetItems");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Squad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Swim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteDataOwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<bool>("Dive")
                        .HasColumnType("boolean");

                    b.Property<int>("Event")
                        .HasColumnType("integer");

                    b.Property<bool>("GoalSwim")
                        .HasColumnType("boolean");

                    b.Property<int?>("Pace")
                        .HasColumnType("integer");

                    b.Property<int?>("PerceivedExertion")
                        .HasColumnType("integer");

                    b.Property<double?>("PercentageOffGoalStrokeRate")
                        .HasColumnType("double precision");

                    b.Property<double?>("PercentageOffGoalTime")
                        .HasColumnType("double precision");

                    b.Property<double?>("PercentageOffPBStrokeRate")
                        .HasColumnType("double precision");

                    b.Property<double?>("PercentageOffPBTime")
                        .HasColumnType("double precision");

                    b.Property<double?>("PotentialRaceTime")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Stroke")
                        .HasColumnType("integer");

                    b.Property<int?>("StrokeCount")
                        .HasColumnType("integer");

                    b.Property<int?>("StrokeRate")
                        .HasColumnType("integer");

                    b.Property<double>("Time")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AthleteDataOwnerId");

                    b.ToTable("Swims");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Event")
                        .HasColumnType("integer");

                    b.Property<string>("SplitDataForTimes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Timetable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SquadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SquadId");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AthleteDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoachDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SquadId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AthleteDataId")
                        .IsUnique();

                    b.HasIndex("CoachDataId")
                        .IsUnique();

                    b.HasIndex("SquadId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AthleteDataAward", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Award", null)
                        .WithMany()
                        .HasForeignKey("AwardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.AthleteData", null)
                        .WithMany()
                        .HasForeignKey("RecipientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Achievement", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.AthleteData", null)
                        .WithMany("Achievements")
                        .HasForeignKey("AthleteDataId");

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.CoachData", null)
                        .WithMany("Achievements")
                        .HasForeignKey("CoachDataId");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Award", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.CoachData", "CoachDataOwner")
                        .WithMany("Awards")
                        .HasForeignKey("CoachDataOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoachDataOwner");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Session", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.CoachData", "CoachDataOwner")
                        .WithMany("Sessions")
                        .HasForeignKey("CoachDataOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Timetable", "Timetable")
                        .WithMany("Sessions")
                        .HasForeignKey("TimetableId");

                    b.Navigation("CoachDataOwner");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Set", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Session", "Session")
                        .WithMany("Sets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.SetItem", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Set", "Set")
                        .WithMany("SetItems")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Squad", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Club", "Club")
                        .WithMany("Squads")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Swim", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.AthleteData", "AthleteDataOwner")
                        .WithMany("Swims")
                        .HasForeignKey("AthleteDataOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteDataOwner");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Timetable", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Squad", "Squad")
                        .WithMany("Timetables")
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.User", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.AthleteData", "AthleteData")
                        .WithOne("UserOwner")
                        .HasForeignKey("SwimmingAppBackend.Infrastructure.Models.User", "AthleteDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.CoachData", "CoachData")
                        .WithOne("UserOwner")
                        .HasForeignKey("SwimmingAppBackend.Infrastructure.Models.User", "CoachDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Squad", "Squad")
                        .WithMany("Members")
                        .HasForeignKey("SquadId");

                    b.Navigation("AthleteData");

                    b.Navigation("CoachData");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.AthleteData", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Swims");

                    b.Navigation("UserOwner")
                        .IsRequired();
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Club", b =>
                {
                    b.Navigation("Squads");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.CoachData", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Awards");

                    b.Navigation("Sessions");

                    b.Navigation("UserOwner")
                        .IsRequired();
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Session", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Set", b =>
                {
                    b.Navigation("SetItems");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Squad", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Timetable", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
