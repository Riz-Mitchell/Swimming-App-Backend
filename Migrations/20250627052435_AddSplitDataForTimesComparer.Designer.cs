// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SwimmingAppBackend.Infrastructure.Context;

#nullable disable

namespace Swimming_App_Backend.Migrations
{
    [DbContext(typeof(SwimmingAppDBContext))]
    [Migration("20250627052435_AddSplitDataForTimesComparer")]
    partial class AddSplitDataForTimesComparer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetValue")
                        .HasColumnType("integer");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Swim a total of 10,000 meters.",
                            Difficulty = 4,
                            Name = "Marathon Swimmer",
                            TargetValue = 10000,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Log your first swim session.",
                            Difficulty = 1,
                            Name = "First Swim",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Log 20 swims.",
                            Difficulty = 2,
                            Name = "Getting it done",
                            TargetValue = 20,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Log 100 swims.",
                            Difficulty = 3,
                            Name = "Busy cooking",
                            TargetValue = 100,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Log 200 swims.",
                            Difficulty = 4,
                            Name = "Proper chef",
                            TargetValue = 200,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "You made your first 1000, congratulations, we gotta do at least 20 bro. Log 1000 swims.",
                            Difficulty = 8,
                            Name = "Gotta do at least 20 bro",
                            TargetValue = 1000,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "How did you do that? Log 2000 swims",
                            Difficulty = 10,
                            Name = "Ashton Hall",
                            TargetValue = 2000,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Description = "Account over a year old.",
                            Difficulty = 6,
                            Name = "Unc status",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Account over 2 years old.",
                            Difficulty = 8,
                            Name = "Fossil",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "One of the first 20 users to join.",
                            Difficulty = 10,
                            Name = "Founding member",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Description = "One of the first 100 users to join.",
                            Difficulty = 8,
                            Name = "Early adopter",
                            TargetValue = 1,
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Description = "One of the first 1000 users to join.",
                            Difficulty = 6,
                            Name = "First 1000",
                            TargetValue = 1,
                            UserType = 0
                        });
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.AthleteData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AthleteDatas");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.CoachData", b =>
                {
                    b.Property<Guid>("CoachDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserOwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("CoachDataId");

                    b.ToTable("CoachDatas");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Split", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Dive")
                        .HasColumnType("boolean");

                    b.Property<int>("IntervalDistance")
                        .HasColumnType("integer");

                    b.Property<int?>("IntervalStrokeCount")
                        .HasColumnType("integer");

                    b.Property<int?>("IntervalStrokeRate")
                        .HasColumnType("integer");

                    b.Property<double>("IntervalTime")
                        .HasColumnType("double precision");

                    b.Property<double?>("PerOffGoalStrokeRate")
                        .HasColumnType("double precision");

                    b.Property<double?>("PerOffGoalTime")
                        .HasColumnType("double precision");

                    b.Property<double?>("PerOffPBIntervalTime")
                        .HasColumnType("double precision");

                    b.Property<double?>("PerOffPBStrokeRate")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Stroke")
                        .HasColumnType("integer");

                    b.Property<Guid>("SwimId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SwimId");

                    b.ToTable("Splits");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Swim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AthleteDataOwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Event")
                        .HasColumnType("integer");

                    b.Property<bool>("GoalSwim")
                        .HasColumnType("boolean");

                    b.Property<int?>("PerceivedExertion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AthleteDataOwnerId");

                    b.ToTable("Swims");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.TimeSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Event")
                        .HasColumnType("integer");

                    b.Property<string>("SplitDataForTimes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AthleteDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CoachDataId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AthleteDataId")
                        .IsUnique();

                    b.HasIndex("CoachDataId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EarnedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId", "AchievementId")
                        .IsUnique();

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Split", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Swim", "Swim")
                        .WithMany("Splits")
                        .HasForeignKey("SwimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Swim");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Swim", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.AthleteData", "AthleteDataOwner")
                        .WithMany("Swims")
                        .HasForeignKey("AthleteDataOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteDataOwner");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.User", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.AthleteData", "AthleteData")
                        .WithOne("UserOwner")
                        .HasForeignKey("SwimmingAppBackend.Infrastructure.Models.User", "AthleteDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.CoachData", "CoachData")
                        .WithOne("UserOwner")
                        .HasForeignKey("SwimmingAppBackend.Infrastructure.Models.User", "CoachDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AthleteData");

                    b.Navigation("CoachData");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.UserAchievement", b =>
                {
                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwimmingAppBackend.Infrastructure.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.AthleteData", b =>
                {
                    b.Navigation("Swims");

                    b.Navigation("UserOwner")
                        .IsRequired();
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.CoachData", b =>
                {
                    b.Navigation("UserOwner")
                        .IsRequired();
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.Swim", b =>
                {
                    b.Navigation("Splits");
                });

            modelBuilder.Entity("SwimmingAppBackend.Infrastructure.Models.User", b =>
                {
                    b.Navigation("UserAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
