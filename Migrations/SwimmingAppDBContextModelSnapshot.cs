// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SwimmingAppBackend.Context;

#nullable disable

namespace Swimming_App_Backend.Migrations
{
    [DbContext(typeof(SwimmingAppDBContext))]
    partial class SwimmingAppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SwimmingAppBackend.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClubId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.CoachData", b =>
                {
                    b.Property<int>("CoachDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoachDataId"));

                    b.Property<int>("UserOwnerId")
                        .HasColumnType("integer");

                    b.HasKey("CoachDataId");

                    b.HasIndex("UserOwnerId")
                        .IsUnique();

                    b.ToTable("CoachDatas");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Split", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<int?>("Pace")
                        .HasColumnType("integer");

                    b.Property<int>("Stroke")
                        .HasColumnType("integer");

                    b.Property<int?>("StrokeRate")
                        .HasColumnType("integer");

                    b.Property<int>("SwimId")
                        .HasColumnType("integer");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<bool>("dive")
                        .HasColumnType("boolean");

                    b.Property<int?>("perceivedExertion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SwimId");

                    b.ToTable("Splits");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Squad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClubId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Swim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<int?>("Pace")
                        .HasColumnType("integer");

                    b.Property<int>("Stroke")
                        .HasColumnType("integer");

                    b.Property<int?>("StrokeRate")
                        .HasColumnType("integer");

                    b.Property<int>("SwimmerDataId")
                        .HasColumnType("integer");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<bool>("dive")
                        .HasColumnType("boolean");

                    b.Property<int?>("perceivedExertion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SwimmerDataId");

                    b.ToTable("Swims");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.SwimmerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GoalTime")
                        .HasColumnType("text");

                    b.Property<int?>("MainDistance")
                        .HasColumnType("integer");

                    b.Property<string>("MainStroke")
                        .HasColumnType("text");

                    b.Property<int>("UserOwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserOwnerId")
                        .IsUnique();

                    b.ToTable("SwimmerDatas");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("CoachDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SquadId")
                        .HasColumnType("integer");

                    b.Property<int?>("SwimmerDataId")
                        .HasColumnType("integer");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SquadId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.CoachData", b =>
                {
                    b.HasOne("SwimmingAppBackend.Models.User", "UserOwner")
                        .WithOne("CoachData")
                        .HasForeignKey("SwimmingAppBackend.Models.CoachData", "UserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Split", b =>
                {
                    b.HasOne("SwimmingAppBackend.Models.Swim", "Swim")
                        .WithMany("Splits")
                        .HasForeignKey("SwimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Swim");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Squad", b =>
                {
                    b.HasOne("SwimmingAppBackend.Models.Club", "Club")
                        .WithMany("Squads")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Swim", b =>
                {
                    b.HasOne("SwimmingAppBackend.Models.SwimmerData", "SwimmerData")
                        .WithMany("Swims")
                        .HasForeignKey("SwimmerDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SwimmerData");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.SwimmerData", b =>
                {
                    b.HasOne("SwimmingAppBackend.Models.User", "UserOwner")
                        .WithOne("SwimmerData")
                        .HasForeignKey("SwimmingAppBackend.Models.SwimmerData", "UserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.User", b =>
                {
                    b.HasOne("SwimmingAppBackend.Models.Squad", "Squad")
                        .WithMany("Members")
                        .HasForeignKey("SquadId");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Club", b =>
                {
                    b.Navigation("Squads");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Squad", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.Swim", b =>
                {
                    b.Navigation("Splits");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.SwimmerData", b =>
                {
                    b.Navigation("Swims");
                });

            modelBuilder.Entity("SwimmingAppBackend.Models.User", b =>
                {
                    b.Navigation("CoachData");

                    b.Navigation("SwimmerData");
                });
#pragma warning restore 612, 618
        }
    }
}
